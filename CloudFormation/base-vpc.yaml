AWSTemplateFormatVersion: 2010-09-09
Description: 
  Sample template to create a VPC with IGW and public IP enabled.
  You will be billed for the AWS resources used if you create a stack from this template.
  After deleting stack, remember to delete the associated S3 bucket.

Resources:

  # create VPC
  myVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      InstanceTenancy: default
      Tags: 
       - Key: Name
         Value: demo-vpc
       - Key: Application
         Value: !Ref 'AWS::StackName'
  
  # create Internet Gateway
  myIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
       - Key: Name
         Value: demo-igw
       - Key: Application
         Value: !Ref 'AWS::StackName'           
  
  # attaching the IGW to my VPC
  vpcToIgw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myIGW

  # create a custom route table for demo vpc
  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags: 
       - Key: Name
         Value: demo-public-route-table
       - Key: Application
         Value: !Ref 'AWS::StackName'
  
  # Add routes entries for public network through igw
  myRoutes:
    Type: AWS::EC2::Route    
    Properties:
      RouteTableId: !Ref myRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref myIGW      
  
  # NACL
  myPublicNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: demo-vpc-nacl
        - Key: Application
          Value: !Ref 'AWS::StackName'        
          
  # Allow all Incoming TCP traffic
  myNaclRulesForInboundTCP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref myPublicNACL
      RuleNumber: '100'
      Protocol: '6'  # tcp
      RuleAction: allow
      Egress: 'false'  # this rule applies to ingress traffic to the subnet
      CidrBlock: 0.0.0.0/0  # any ip address
      PortRange:
        From: '0'
        To: '65535'
          
  # Allow all Outgoing TCP traffic
  myNaclRulesForOutboundTCP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref myPublicNACL
      RuleNumber: '100'
      Protocol: '6'  # tcp
      RuleAction: allow
      Egress: 'true'  # this rule applies to egress traffic from the subnet
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'  # client will be using ephemeral port, using 80 or 22 here will not work
        To: '65535'
                
  # creating 2 public subnets  
  myPublicSubnet1A:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref myVPC
      AvailabilityZone: ap-south-1a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: public-subnet-ap-south-1a        
      - Key: Application
        Value: !Ref 'AWS::StackName'
  
  myPublicSubnet1B:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref myVPC
      AvailabilityZone: ap-south-1b
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: public-subnet-ap-south-1b        
      - Key: Application
        Value: !Ref 'AWS::StackName'
  
  # asscoiate subnet with our route table else by default it is asscoiated with main route table
  mySubnet1ARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref myPublicSubnet1A
      RouteTableId: !Ref myRouteTable
      
  mySubnet1BRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref myPublicSubnet1B
      RouteTableId: !Ref myRouteTable
      
  # associate subnet with NACL else by default it is asscoiated with main NACLs   
  mySubnet1ANaclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref myPublicSubnet1A
      NetworkAclId: !Ref myPublicNACL
      
  mySubnet1BNaclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref myPublicSubnet1B
      NetworkAclId: !Ref myPublicNACL

# output key resources ids and export the values for cross-stack referencing
Outputs:
  VPCID:
    Description: the Id of the newly created VPC
    Value: !Ref myVPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID" # the name for cross referencing
    
  PublicSubnet1A:
    Description: SubnetId of the public subnet-1
    Value: !Ref myPublicSubnet1A
    Export:
      Name: !Sub "${AWS::StackName}-SUBNET1A"
      
  PublicSubnet1B:
    Description: SubnetId of the public subnet-2
    Value: !Ref myPublicSubnet1B
    Export:
      Name: !Sub "${AWS::StackName}-SUBNET1B"
  